package anaskfinancialtracker;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.Timer;
import javax.swing.table.DefaultTableModel;
import java.io.File;
import java.io.FileOutputStream;
import javax.swing.JFileChooser;
import javax.swing.JTable;



/**
 *
 * @author aamir
 */
public class inventory extends javax.swing.JFrame {

    private String fullname;

    /**
     * Creates new form inventory
     */
 public inventory(String fullname) {
 this.fullname = fullname; // Initialize the member variable with the passed value
        initComponents();               // assuming you have a fullname field

         Timer timer = new Timer(100, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                updateDateTime();
            }
        });
        timer.start();
        
         jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[]{
            "Quantity: Low to High",
            "Quantity: High to Low",
            "Alphabetically: A-Z",
            "Alphabetically: Z-A"
        }));
        
     jComboBox1.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                String selectedSortType = (String) jComboBox1.getSelectedItem();
                List<String[]> data = extractTableData();
                bubbleSort(data, selectedSortType);
                updateTableModel(data);
            }
        });



     
     
}

    private inventory() {
    }

  
 
       private List<String[]> extractTableData() {
        DefaultTableModel model = (DefaultTableModel) inventoryTbl.getModel();
        List<String[]> data = new ArrayList<>();
        for (int i = 0; i < model.getRowCount(); i++) {
            String item = (String) model.getValueAt(i, 0);
            String amount = model.getValueAt(i, 1).toString();
            data.add(new String[]{item, amount});
        }
        return data;
    }

    private void bubbleSort(List<String[]> data, String sortType) {
        boolean swapped;
        for (int i = 0; i < data.size() - 1; i++) {
            swapped = false;
            for (int j = 0; j < data.size() - i - 1; j++) {
                if (needSwap(data, j, sortType)) {
                    String[] temp = data.get(j);
                    data.set(j, data.get(j + 1));
                    data.set(j + 1, temp);
                    swapped = true;
                }
            }
            if (!swapped) break;
        }
    }

    private boolean needSwap(List<String[]> data, int index, String sortType) {
        switch (sortType) {
            case "Quantity: Low to High":
                return Integer.parseInt(data.get(index)[1]) > Integer.parseInt(data.get(index + 1)[1]);
            case "Quantity: High to Low":
                return Integer.parseInt(data.get(index)[1]) < Integer.parseInt(data.get(index + 1)[1]);
            case "Alphabetically: A-Z":
                return data.get(index)[0].compareTo(data.get(index + 1)[0]) > 0;
            case "Alphabetically: Z-A":
                return data.get(index)[0].compareTo(data.get(index + 1)[0]) < 0;
            default:
                return false;
        }
    }

    private void updateTableModel(List<String[]> sortedData) {
        DefaultTableModel model = (DefaultTableModel) inventoryTbl.getModel();
        model.setRowCount(0);
        for (String[] row : sortedData) {
            model.addRow(row);
        }
    }
        

      private void updateDateTime() {
        SimpleDateFormat formatter = new SimpleDateFormat("dd-MM-yyyy HH:mm:ss");
        Date date = new Date();
        dateTimeLabel.setText(formatter.format(date)); 
    }
    
      
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        inventoryTbl = new javax.swing.JTable();
        titleLbl = new javax.swing.JLabel();
        showBtn = new javax.swing.JButton();
        sellBtn = new javax.swing.JButton();
        removeBtn = new javax.swing.JButton();
        backBtn = new javax.swing.JButton();
        amountTxt = new javax.swing.JTextField();
        itemnameTxt = new javax.swing.JTextField();
        usernameLbl = new javax.swing.JLabel();
        usernameLbl1 = new javax.swing.JLabel();
        addBtn = new javax.swing.JButton();
        addStockBtn = new javax.swing.JButton();
        dateTimeLabel = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox<>();
        searchTxt = new javax.swing.JTextField();
        searchButton = new javax.swing.JButton();
        usernameLbl2 = new javax.swing.JLabel();
        printBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(0, 0, 0));
        jPanel1.setForeground(new java.awt.Color(0, 0, 0));
        jPanel1.setPreferredSize(new java.awt.Dimension(1048, 521));

        inventoryTbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Product Name", "Quantity"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                true, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(inventoryTbl);

        titleLbl.setFont(new java.awt.Font("Avenir Next Condensed", 1, 48)); // NOI18N
        titleLbl.setForeground(new java.awt.Color(0, 255, 204));
        titleLbl.setText("INVENTORY");

        showBtn.setFont(new java.awt.Font("Avenir Next", 1, 18)); // NOI18N
        showBtn.setText("Show Values");
        showBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showBtnActionPerformed(evt);
            }
        });

        sellBtn.setFont(new java.awt.Font("Avenir Next", 1, 18)); // NOI18N
        sellBtn.setText("Sell Product");
        sellBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sellBtnActionPerformed(evt);
            }
        });

        removeBtn.setFont(new java.awt.Font("Avenir Next", 1, 18)); // NOI18N
        removeBtn.setText("Remove Product");
        removeBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeBtnActionPerformed(evt);
            }
        });

        backBtn.setText("Back");
        backBtn.setMaximumSize(new java.awt.Dimension(576, 518));
        backBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backBtnActionPerformed(evt);
            }
        });

        usernameLbl.setFont(new java.awt.Font("Avenir Next Condensed", 0, 18)); // NOI18N
        usernameLbl.setForeground(new java.awt.Color(255, 255, 255));
        usernameLbl.setText("Quantity");

        usernameLbl1.setFont(new java.awt.Font("Avenir Next Condensed", 0, 18)); // NOI18N
        usernameLbl1.setForeground(new java.awt.Color(255, 255, 255));
        usernameLbl1.setText("Item Name");

        addBtn.setFont(new java.awt.Font("Avenir Next", 1, 18)); // NOI18N
        addBtn.setText("Add New Item");
        addBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addBtnActionPerformed(evt);
            }
        });

        addStockBtn.setFont(new java.awt.Font("Avenir Next", 1, 18)); // NOI18N
        addStockBtn.setText("Add Existing Product");
        addStockBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addStockBtnActionPerformed(evt);
            }
        });

        dateTimeLabel.setBackground(new java.awt.Color(255, 255, 255));
        dateTimeLabel.setForeground(new java.awt.Color(255, 255, 255));

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Quantity: Low to High", "Quantity: High to Low", "Alphabetically: A-Z", "Alphabetically: Z-A" }));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        searchButton.setText("Enter");
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });

        usernameLbl2.setFont(new java.awt.Font("Avenir Next Condensed", 0, 18)); // NOI18N
        usernameLbl2.setForeground(new java.awt.Color(255, 255, 255));
        usernameLbl2.setText("Search Product");

        printBtn.setFont(new java.awt.Font("Avenir Next", 1, 18)); // NOI18N
        printBtn.setText("Print Data");
        printBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                printBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(backBtn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(usernameLbl2)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(31, 31, 31)
                                .addComponent(usernameLbl1))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(usernameLbl)))
                        .addGap(51, 51, 51)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(amountTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(itemnameTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(457, 457, 457))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 508, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(addBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(showBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(printBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(157, 157, 157)
                                .addComponent(titleLbl)
                                .addGap(138, 138, 138)
                                .addComponent(dateTimeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(searchTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 508, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(searchButton, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(addStockBtn)
                                .addGap(18, 18, 18)
                                .addComponent(sellBtn)
                                .addGap(18, 18, 18)
                                .addComponent(removeBtn)))
                        .addGap(100, 100, 100))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(titleLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(dateTimeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(backBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(searchTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchButton)
                    .addComponent(usernameLbl2))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(showBtn)
                        .addGap(18, 18, 18)
                        .addComponent(addBtn)
                        .addGap(18, 18, 18)
                        .addComponent(printBtn))
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 243, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(usernameLbl1)
                    .addComponent(itemnameTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(amountTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(usernameLbl))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 34, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addStockBtn)
                    .addComponent(sellBtn)
                    .addComponent(removeBtn))
                .addGap(21, 21, 21))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 864, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 526, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
        updateInventoryTableBasedOnSearch();

    }//GEN-LAST:event_searchButtonActionPerformed

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        String[] sortingOptions = {"Quantity: Low to High", "Quantity: High to Low", "Alphabetically: A-Z", "Alphabetically: Z-A"};
        JComboBox<String> sortComboBox = new JComboBox<>(sortingOptions);
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void addStockBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addStockBtnActionPerformed
        String item = itemnameTxt.getText();
        String additionalStockText = amountTxt.getText(); // Assuming amountTxt is your input field for the added quantity

        if (!additionalStockText.matches("\\d+")) {

            JOptionPane.showMessageDialog(null, "Invalid input", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        int additionalStock = Integer.parseInt(additionalStockText);

        if (additionalStock <= 0) {
            JOptionPane.showMessageDialog(null, "Invalid input. Please enter a positive number for the stock.", "Error", JOptionPane.ERROR_MESSAGE);

            return;
        }

        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            String url = "jdbc:mysql://localhost:3306/anaskdatabase?zeroDateTimeBehavior=CONVERT_TO_NULL";
            Connection con = DriverManager.getConnection(url, "root", "Mysqldatabase101");
            Statement st = con.createStatement();
            con.setAutoCommit(false);  // Start transaction

            // Fetch the current price and expenses for the item
            String fetchSql = "SELECT price, expenses FROM inventory WHERE item='" + item + "';";
            ResultSet rs = st.executeQuery(fetchSql);

            if (!rs.next()) {
                JOptionPane.showMessageDialog(null, "Product not found.", "Error", JOptionPane.ERROR_MESSAGE);

                return;
            }

            int price = rs.getInt("price");
            int expenses = rs.getInt("expenses");

            // Update the inventory amount
            String sql = "UPDATE inventory SET amount = amount + " + additionalStock + " WHERE item='" + item + "';";
            int rowsAffected = st.executeUpdate(sql);

            if (rowsAffected == 0) {
                JOptionPane.showMessageDialog(null, "Error updating the item: " + item, "Error", JOptionPane.ERROR_MESSAGE);
                con.rollback();
                return;
            }

            int additionalCost = expenses * additionalStock;

            // Update the COGS in the finance table
            st.executeUpdate("UPDATE finance SET Amount = Amount + " + additionalCost + " WHERE Name='Cost of Goods';");

            // Update Potential Profit (assuming it is calculated as (price - expenses) * amount)
            int potentialProfit = (price - expenses) * (additionalStock);
            st.executeUpdate("UPDATE finance SET Amount = Amount + " + potentialProfit + " WHERE Name='Potential Profit';");

            con.commit();  // Commit transaction if all updates are successful
            JOptionPane.showMessageDialog(null, "Stock updated successfully for " + item, "Success", JOptionPane.INFORMATION_MESSAGE);

            st.close();
            con.close();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "An error occurred: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);

            e.printStackTrace();
        }
    }//GEN-LAST:event_addStockBtnActionPerformed

    private void addBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addBtnActionPerformed
        this.dispose();
        inventoryadd invent = new inventoryadd(fullname);
        invent.setVisible(true);
    }//GEN-LAST:event_addBtnActionPerformed

    private void backBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backBtnActionPerformed
        this.dispose();
        mainpage main = new mainpage(fullname);
        main.setVisible(true);
    }//GEN-LAST:event_backBtnActionPerformed

    private void removeBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeBtnActionPerformed

   DefaultTableModel model = (DefaultTableModel) inventoryTbl.getModel();
try {
    Class.forName("com.mysql.cj.jdbc.Driver");
    String url = "jdbc:mysql://localhost:3306/anaskdatabase?zeroDateTimeBehavior=CONVERT_TO_NULL";
    Connection con = DriverManager.getConnection(url, "root", "Mysqldatabase101");
    Statement st = con.createStatement();
    String item = itemnameTxt.getText();

    // Confirmation dialog before removal
    int response = JOptionPane.showConfirmDialog(null, "Are you sure you want to remove " + item + "?", "Confirm Removal", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);

    if (response == JOptionPane.YES_OPTION) {
        // Check if the item exists in the database
        String checkQuery = "SELECT count(*) FROM inventory WHERE item= '" + item + "';";
        ResultSet rs = st.executeQuery(checkQuery);
        int count = 0;
        if (rs.next()) {
            count = rs.getInt(1); // Get the count result
        }

        if (count > 0) {
            // If item exists, proceed to delete
            String query = "DELETE FROM inventory WHERE item= '" + item + "';";
            st.executeUpdate(query);

            // Show success message
            JOptionPane.showMessageDialog(null, "Successfully removed " + item, "Success", JOptionPane.INFORMATION_MESSAGE);
        } else {
            // Show item does not exist message
            JOptionPane.showMessageDialog(null, "Item does not exist", "Error", JOptionPane.ERROR_MESSAGE);
        }
    } else {
        JOptionPane.showMessageDialog(null, "Removal cancelled", "Cancelled", JOptionPane.INFORMATION_MESSAGE);
    }

    st.close();
    con.close();

} catch (Exception e) {
    JOptionPane.showMessageDialog(null, "An error occurred: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    e.printStackTrace(); // It's better to print the stack trace for debugging
}

    }//GEN-LAST:event_removeBtnActionPerformed

    private void sellBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sellBtnActionPerformed
 DefaultTableModel model = (DefaultTableModel) inventoryTbl.getModel();
    String item = itemnameTxt.getText();
    String amountText = amountTxt.getText();
    
    if (!amountText.matches("\\d+")) { // Validate numeric input
        JOptionPane.showMessageDialog(null, "Please enter a valid number for the amount.", "Invalid Input", JOptionPane.ERROR_MESSAGE);
        return;
    }

    int amount = Integer.parseInt(amountText);
    
    if (amount <= 0) {
        JOptionPane.showMessageDialog(null, "The quantity must be a positive number.", "Invalid Quantity", JOptionPane.ERROR_MESSAGE);
        return;
    }
    
    // Confirmation dialog
    int confirmation = JOptionPane.showConfirmDialog(null, "Are you sure you want to sell " + amount + " units of " + item + "?", "Confirm Sale", JOptionPane.YES_NO_OPTION);
    if (confirmation != JOptionPane.YES_OPTION) {
        return; // User canceled the operation
    }

    try {
        Class.forName("com.mysql.cj.jdbc.Driver");
        String url = "jdbc:mysql://localhost:3306/anaskdatabase?zeroDateTimeBehavior=CONVERT_TO_NULL";
        Connection con = DriverManager.getConnection(url, "root", "Mysqldatabase101");
        con.setAutoCommit(false);  // Start transaction
        Statement st = con.createStatement();

        String sql = "SELECT amount, price, expenses FROM inventory WHERE item='" + item + "';";
        ResultSet rs = st.executeQuery(sql);

        if (!rs.next()) {
            JOptionPane.showMessageDialog(null, "Product not found. Please check the product name and try again.", "Product Not Found", JOptionPane.ERROR_MESSAGE);
            con.rollback();
            return;
        }

        int stock = rs.getInt("amount"), price = rs.getInt("price"), expenses = rs.getInt("expenses");

        if (stock < amount) {
            JOptionPane.showMessageDialog(null, "Insufficient stock. Only " + stock + " units available.", "Insufficient Stock", JOptionPane.ERROR_MESSAGE);
            con.rollback();
            return;
        }

        // Proceed with selling
        int newStock = stock - amount;
        st.executeUpdate("UPDATE inventory SET amount =" + newStock + " WHERE item='" + item + "';");
        st.executeUpdate("UPDATE inventory SET sold = sold + " + amount + " WHERE item='" + item + "';");

        // Financial updates
        int salesRevenue = price * amount;
        int profit = (price - expenses) * amount;
        int cogs = expenses * amount;
        int potentialProfit = (price - expenses) * newStock;

        st.executeUpdate("UPDATE finance SET Amount = Amount + " + salesRevenue + " WHERE Name='Sale Revenue';");
        st.executeUpdate("UPDATE finance SET Amount = Amount + " + profit + " WHERE Name='Profit';");
        st.executeUpdate("UPDATE finance SET Amount = Amount + " + cogs + " WHERE Name='COGS';");
        st.executeUpdate("UPDATE finance SET Amount = " + potentialProfit + " WHERE Name='Potential Profit';");

        con.commit();  // Commit transaction
        JOptionPane.showMessageDialog(null, "Successfully sold " + amount + " units of " + item + ".", "Sale Successful", JOptionPane.INFORMATION_MESSAGE);
    } catch (Exception e) {
        JOptionPane.showMessageDialog(null, "An error occurred during the sale operation: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
       
    }

    }//GEN-LAST:event_sellBtnActionPerformed

    private void showBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showBtnActionPerformed
        DefaultTableModel model=(DefaultTableModel)inventoryTbl.getModel();

        try{
            Class.forName("com.mysql.cj.jdbc.Driver");
            String url="jdbc:mysql://localhost:3306/anaskdatabase?zeroDateTimeBehavior=CONVERT_TO_NULL";
            Connection con=DriverManager.getConnection(url,"root","Mysqldatabase101");
            Statement st=con.createStatement () ;
            String query = "Select * from inventory";

            ResultSet rs=st.executeQuery(query);
            while(model.getRowCount()>0)
            model.removeRow(0);
            while(rs.next()){
                String item = rs.getString("item");
                int amount = rs.getInt("amount");
                model.addRow(new Object[]{item,amount});
            }

        }

        catch(Exception e)
        {
            System.out.println("hello");
        }
    }//GEN-LAST:event_showBtnActionPerformed

    private void printBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_printBtnActionPerformed
JTable table = inventoryTbl;  // Your JTable object
    if(table.getRowCount() <= 0) {
        JOptionPane.showMessageDialog(this, "There is no data to save.", "No data", JOptionPane.ERROR_MESSAGE);
        return;
    }
    JFileChooser fileChooser = new JFileChooser();
    fileChooser.setDialogTitle("Specify a file to save");
    int userSelection = fileChooser.showSaveDialog(this);

    if (userSelection == JFileChooser.APPROVE_OPTION) {
        File fileToSave = fileChooser.getSelectedFile();
        // Ensure the file has .pdf extension
        String filePath = fileToSave.getAbsolutePath();
        if (!filePath.endsWith(".pdf")) {
            filePath += ".pdf";
        }

        try {
            // Step 1: Create  Document
            com.itextpdf.text.Document document = new com.itextpdf.text.Document();
            // Step 2: Create  PdfWriter instance
            com.itextpdf.text.pdf.PdfWriter.getInstance(document, new FileOutputStream(filePath));
            // Step 3: Open  Document
            document.open();
            // Step 4: Add content
            com.itextpdf.text.pdf.PdfPTable pdfTable = new com.itextpdf.text.pdf.PdfPTable(table.getColumnCount());
            // Adding column headers
            for(int i = 0; i < table.getColumnCount(); i++) {
                pdfTable.addCell(table.getColumnName(i));
            }
            // Adding rows
            for (int rows = 0; rows < table.getRowCount(); rows++) {
                for (int cols = 0; cols < table.getColumnCount(); cols++) {
                    pdfTable.addCell(table.getModel().getValueAt(rows, cols).toString());
                }
            }
            // Step 5: Add the table to the document
            document.add(pdfTable);
            // Step 6: Close the Document
            document.close();
            JOptionPane.showMessageDialog(this, "PDF saved successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Error saving PDF: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            ex.printStackTrace();
        }
    }                                    
    }//GEN-LAST:event_printBtnActionPerformed

    
    
    
    
    

    
    
    
    
    
    
    
    
    
    
    private void updateInventoryTableBasedOnSearch() {
      String searchText = searchTxt.getText().toLowerCase();
    DefaultTableModel model = (DefaultTableModel) inventoryTbl.getModel();
    model.setRowCount(0); // Clear existing data

    try {
        Class.forName("com.mysql.cj.jdbc.Driver");
        Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/anaskdatabase", "root", "Mysqldatabase101");
        Statement st = con.createStatement();
        String query = "SELECT * FROM inventory WHERE LOWER(item) LIKE '%" + searchText + "%'";

        ResultSet rs = st.executeQuery(query);
        while (rs.next()) {
            String item = rs.getString("item");
            int amount = rs.getInt("amount");
            model.addRow(new Object[]{item, amount});
        }
        rs.close();
        st.close();
        con.close();
    } catch (Exception e) {
        JOptionPane.showMessageDialog(null, "Error: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        e.printStackTrace();
    }
}


    
    
    
    
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(inventory.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(inventory.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(inventory.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(inventory.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new inventory().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addBtn;
    private javax.swing.JButton addStockBtn;
    private javax.swing.JTextField amountTxt;
    private javax.swing.JButton backBtn;
    private javax.swing.JLabel dateTimeLabel;
    private javax.swing.JTable inventoryTbl;
    private javax.swing.JTextField itemnameTxt;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton printBtn;
    private javax.swing.JButton removeBtn;
    private javax.swing.JButton searchButton;
    private javax.swing.JTextField searchTxt;
    private javax.swing.JButton sellBtn;
    private javax.swing.JButton showBtn;
    private javax.swing.JLabel titleLbl;
    private javax.swing.JLabel usernameLbl;
    private javax.swing.JLabel usernameLbl1;
    private javax.swing.JLabel usernameLbl2;
    // End of variables declaration//GEN-END:variables
}
